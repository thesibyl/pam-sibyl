1) get username and if it starts with + or -, FAIL

/* identify user and get authentication credentials */
FILE *shadow;
if ((pam_err = pam_get_user(pamh, &user, NULL)) != PAM_SUCCESS){
    syslog(LOG_NOTICE, "pam_get_user gives an error");
    return (pam_err);
}
/* fail if '+' or '-' or '_' just in case */


2) if PRELIM (meaning?):
      authenticate the user (really prompt him for his password
      unless he is root, etc)
      can I just call pam_sm_authenticate()? Because this is just
          the meaning of that function...

    pam_err = pam_sm_authenticate(pamh, flags, 0? null?)
      we might as well ask for the password and be done with it.


      3) unix_verify_shadow (I assume this is just a check on file
         availability)

4) otherwise
      5) get the old token (useless for us) (haven't we got it?, no get
         it from pam)
      6) get the new password (twice each time, try several times
         if we are 'difficult'-aware (_pam_unix_approve_pass)

5) try to lock pwdf(), fail if unable to
6) don't understand if(pass_old) -> verify_password(pass_old), password
   changed by another process...
7) verify user shadow entry OK
8) _pam_unix_approve_pass again(?)
9) modify the password database:
   10) encrypt the password
   11) _do_set_pass
   12) etc. clear memory etc.


      